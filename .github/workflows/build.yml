name: build

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true
  
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  build_manylinux:
    strategy:
      matrix:
        include:
          - name: manylinux2014 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
          - name: manylinux2014 aarch64
            host_runner: linux-arm64
            docker_tag: manylinux2014_aarch64
    name: ${{ matrix.name }} platform
    runs-on: ${{ matrix.host_runner }}
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build ${{ matrix.name }} package
      run: |
        export PATH="/toolchain/bin:$PATH"
        export CC=gcc
        export CXX=g++
        export CPPFLAGS=-I/toolchain/include
        export LDFLAGS=-L/toolchain/lib64
        curl -s -L -O --remote-name-all https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.bz2
        echo "475d589d51a7f8b3ba2ba4eda022b170e562ca3b760ee922c146b6c65856ef39  boost_1_79_0.tar.bz2" | sha256sum -c
        bzip2 -dc boost_1_79_0.tar.bz2 | tar -xf -
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DBoost_NO_SYSTEM_PATHS=TRUE -DBOOST_INCLUDEDIR=$(pwd)/boost_1_79_0/; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build

  build_darwin_x86_64:
    name: Darwin x86_64 platform
    runs-on: macos-11
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build WasmEdge-image for Darwin x86_64
      run: |
        brew install llvm@14 ninja boost cmake
        export LLVM_DIR="/usr/local/opt/llvm@14/lib/cmake"
        export CC=clang
        export CXX=clang++
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build

  build_android:
    name: Android platforms
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install dependency
      run: |
        apt update && apt install -y unzip
        apt remove -y cmake
        curl -sLO https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2-linux-x86_64.tar.gz
        tar -zxf cmake-3.22.2-linux-x86_64.tar.gz
        cp -r cmake-3.22.2-linux-x86_64/bin /usr/local
        cp -r cmake-3.22.2-linux-x86_64/share /usr/local
        curl -sLO https://dl.google.com/android/repository/android-ndk-r23b-linux.zip
        unzip -q android-ndk-r23b-linux.zip
    - name: Build WasmEdge-tensorflow for Android
      run: |
        export ANDROID_NDK_HOME=$(pwd)/android-ndk-r23b/
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=OFF -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=23 -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a -DCMAKE_ANDROID_NDK=$ANDROID_NDK_HOME -DCMAKE_ANDROID_STL_TYPE=c++_static; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build

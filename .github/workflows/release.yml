name: release

concurrency:
  group: release-${{ github.head_ref }}
  cancel-in-progress: true
  
on:
  push:
    tags:
      - "*"

jobs:
  create:
    name: Create Release
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:ubuntu-build-gcc
    outputs:
      version: ${{ steps.prep.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Get version
      id: prep
      run: |
        git config --global --add safe.directory $(pwd)
        echo ::set-output name=version::$(git describe --tag)
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: WasmEdge-TensorFlow ${{ steps.prep.outputs.version }}
        body_path: .CurrentChangelog.md
        draft: true
        prerelease: true

  build_and_upload_ubuntu:
    name: Ubuntu 20.04 x86_64 platform
    needs: create
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:ubuntu-build-clang
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build WasmEdge-tensorflow for Ubuntu 20.04 x86_64
      run: |
        git config --global --add safe.directory $(pwd)
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build
        cd build
        tar -zcvf wasmedge-tf.tar.gz include/wasmedge/wasmedge-tensorflow.h lib/libwasmedge-tensorflow_c.so
        tar -zcvf wasmedge-tflite.tar.gz include/wasmedge/wasmedge-tensorflowlite.h lib/libwasmedge-tensorflowlite_c.so
        cd ..
        mv build/wasmedge-tf.tar.gz wasmedge-tf.tar.gz
        mv build/wasmedge-tflite.tar.gz wasmedge-tflite.tar.gz
        ls -alF
    - name: Upload WasmEdge-tensorflow Ubuntu 20.04 x86_64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tf.tar.gz
        asset_name: WasmEdge-tensorflow-${{ needs.create.outputs.version }}-ubuntu20.04_x86_64.tar.gz
        asset_content_type: application/x-gzip
    - name: Upload WasmEdge-tensorflowlite Ubuntu 20.04 x86_64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tflite.tar.gz
        asset_name: WasmEdge-tensorflowlite-${{ needs.create.outputs.version }}-ubuntu20.04_x86_64.tar.gz
        asset_content_type: application/x-gzip

  build_and_upload_manylinux2014_x86_64:
    name: Build WasmEdge-TensorFlow on manylinux2014_x86_64 platform
    needs: create
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:manylinux2014_x86_64
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build manylinux2014_x86_64 package
      run: |
        export PATH="/toolchain/bin:$PATH"
        export CC=gcc
        export CXX=g++
        export CPPFLAGS=-I/toolchain/include
        export LDFLAGS=-L/toolchain/lib64
        curl -s -L -O --remote-name-all https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.bz2
        echo "475d589d51a7f8b3ba2ba4eda022b170e562ca3b760ee922c146b6c65856ef39  boost_1_79_0.tar.bz2" | sha256sum -c
        bzip2 -dc boost_1_79_0.tar.bz2 | tar -xf -
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DBoost_NO_SYSTEM_PATHS=TRUE -DBOOST_INCLUDEDIR=$(pwd)/boost_1_79_0/; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build
        cd build
        tar -zcvf wasmedge-tf.tar.gz include/wasmedge/wasmedge-tensorflow.h lib/libwasmedge-tensorflow_c.so
        tar Jcvf wasmedge-tf.tar.xz include/wasmedge/wasmedge-tensorflow.h lib/libwasmedge-tensorflow_c.so
        tar -zcvf wasmedge-tflite.tar.gz include/wasmedge/wasmedge-tensorflowlite.h lib/libwasmedge-tensorflowlite_c.so
        tar Jcvf wasmedge-tflite.tar.xz include/wasmedge/wasmedge-tensorflowlite.h lib/libwasmedge-tensorflowlite_c.so
        cd ..
        mv build/wasmedge-tf.tar.gz wasmedge-tf.tar.gz
        mv build/wasmedge-tf.tar.xz wasmedge-tf.tar.xz
        mv build/wasmedge-tflite.tar.gz wasmedge-tflite.tar.gz
        mv build/wasmedge-tflite.tar.xz wasmedge-tflite.tar.xz
        ls -alF
    - name: Upload WasmEdge-tensorflow manylinux2014_x86_64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tf.tar.gz
        asset_name: WasmEdge-tensorflow-${{ needs.create.outputs.version }}-manylinux2014_x86_64.tar.gz
        asset_content_type: application/x-gzip
    - name: Upload WasmEdge-tensorflow manylinux2014_x86_64 tar.xz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tf.tar.xz
        asset_name: WasmEdge-tensorflow-${{ needs.create.outputs.version }}-manylinux2014_x86_64.tar.xz
        asset_content_type: application/x-xz
    - name: Upload WasmEdge-tensorflowlite manylinux2014_x86_64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tflite.tar.gz
        asset_name: WasmEdge-tensorflowlite-${{ needs.create.outputs.version }}-manylinux2014_x86_64.tar.gz
        asset_content_type: application/x-gzip
    - name: Upload WasmEdge-tensorflowlite manylinux2014_x86_64 tar.xz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tflite.tar.xz
        asset_name: WasmEdge-tensorflowlite-${{ needs.create.outputs.version }}-manylinux2014_x86_64.tar.xz
        asset_content_type: application/x-xz

  build_and_upload_manylinux2014_aarch64:
    name: Build WasmEdge-TensorFlow on manylinux2014_aarch64 platform
    needs: create
    runs-on: linux-arm64
    container:
      image: wasmedge/wasmedge:manylinux2014_aarch64
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build manylinux2014_aarch64 package
      run: |
        export PATH="/toolchain/bin:$PATH"
        export CC=gcc
        export CXX=g++
        export CPPFLAGS=-I/toolchain/include
        export LDFLAGS=-L/toolchain/lib64
        curl -s -L -O --remote-name-all https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.bz2
        echo "475d589d51a7f8b3ba2ba4eda022b170e562ca3b760ee922c146b6c65856ef39  boost_1_79_0.tar.bz2" | sha256sum -c
        bzip2 -dc boost_1_79_0.tar.bz2 | tar -xf -
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DBoost_NO_SYSTEM_PATHS=TRUE -DBOOST_INCLUDEDIR=$(pwd)/boost_1_79_0/; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build
        cd build
        tar -zcvf wasmedge-tflite.tar.gz include/wasmedge/wasmedge-tensorflowlite.h lib/libwasmedge-tensorflowlite_c.so
        tar Jcvf wasmedge-tflite.tar.xz include/wasmedge/wasmedge-tensorflowlite.h lib/libwasmedge-tensorflowlite_c.so
        cd ..
        mv build/wasmedge-tflite.tar.gz wasmedge-tflite.tar.gz
        mv build/wasmedge-tflite.tar.xz wasmedge-tflite.tar.xz
        ls -alF
    # Only tensorflow-lite has aarch64.
    - name: Upload WasmEdge-tensorflowlite manylinux2014_aarch64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tflite.tar.gz
        asset_name: WasmEdge-tensorflowlite-${{ needs.create.outputs.version }}-manylinux2014_aarch64.tar.gz
        asset_content_type: application/x-gzip
    - name: Upload WasmEdge-tensorflowlite manylinux2014_aarch64 tar.xz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tflite.tar.xz
        asset_name: WasmEdge-tensorflowlite-${{ needs.create.outputs.version }}-manylinux2014_aarch64.tar.xz
        asset_content_type: application/x-xz

  build_and_upload_darwin_x86_64:
    name: Darwin x86_64 platfrom
    needs: create
    runs-on: macos-11
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build WasmEdge-tensorflow for Darwin x86_64
      run: |
        brew install llvm ninja boost cmake
        export LLVM_DIR="/usr/local/opt/llvm/lib/cmake"
        export CC=clang
        export CXX=clang++
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build
        cd build
        tar -zcvf wasmedge-tf.tar.gz include/wasmedge/wasmedge-tensorflow.h lib/libwasmedge-tensorflow_c.dylib
        tar -zcvf wasmedge-tflite.tar.gz include/wasmedge/wasmedge-tensorflowlite.h lib/libwasmedge-tensorflowlite_c.dylib
        cd ..
        mv build/wasmedge-tf.tar.gz wasmedge-tf.tar.gz
        mv build/wasmedge-tflite.tar.gz wasmedge-tflite.tar.gz
        ls -alF
    - name: Upload WasmEdge-tensorflow darwin_x86_64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tf.tar.gz
        asset_name: WasmEdge-tensorflow-${{ needs.create.outputs.version }}-darwin_x86_64.tar.gz
        asset_content_type: application/x-gzip
    - name: Upload WasmEdge-tensorflowlite darwin_x86_64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tflite.tar.gz
        asset_name: WasmEdge-tensorflowlite-${{ needs.create.outputs.version }}-darwin_x86_64.tar.gz
        asset_content_type: application/x-gzip

  build_and_upload_android:
    name: Android platforms
    needs: create
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install dependency
      run: |
        apt update && apt install -y unzip
        apt remove -y cmake
        curl -sLO https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2-linux-x86_64.tar.gz
        tar -zxf cmake-3.22.2-linux-x86_64.tar.gz
        cp -r cmake-3.22.2-linux-x86_64/bin /usr/local
        cp -r cmake-3.22.2-linux-x86_64/share /usr/local
        curl -sLO https://dl.google.com/android/repository/android-ndk-r23b-linux.zip
        unzip -q android-ndk-r23b-linux.zip
    - name: Build WasmEdge-tensorflow for Android
      run: |
        export ANDROID_NDK_HOME=$(pwd)/android-ndk-r23b/
        if ! cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=OFF -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=23 -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a -DCMAKE_ANDROID_NDK=$ANDROID_NDK_HOME -DCMAKE_ANDROID_STL_TYPE=c++_static; then
            echo === CMakeOutput.log ===
            cat build/CMakeFiles/CMakeOutput.log
            echo === CMakeError.log ===
            cat build/CMakeFiles/CMakeError.log
            exit 1
        fi
        cmake --build build
        cd build
        tar -zcvf wasmedge-tflite.tar.gz include/wasmedge/wasmedge-tensorflowlite.h lib/libwasmedge-tensorflowlite_c.so
        cd ..
        mv build/wasmedge-tflite.tar.gz wasmedge-tflite.tar.gz
        ls -alF
    - name: Upload WasmEdge-tensorflowlite android_aarch64 tar.gz package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: wasmedge-tflite.tar.gz
        asset_name: WasmEdge-tensorflowlite-${{ needs.create.outputs.version }}-android_aarch64.tar.gz
        asset_content_type: application/x-gzip
